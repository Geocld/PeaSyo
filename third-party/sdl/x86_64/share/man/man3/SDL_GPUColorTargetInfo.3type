.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_GPUColorTargetInfo:
.\"   https://wiki.libsdl.org/SDL_GPUColorTargetInfo
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-preview-3.1.3
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_GPUColorTargetInfo
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_GPUColorTargetInfo 3type "SDL 3.1.3" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_GPUColorTargetInfo \- A structure specifying the parameters of a color target used by a render pass\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_gpu\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef struct SDL_GPUColorTargetInfo
.BI "{
.BI "    SDL_GPUTexture *texture;         /**< The texture that will be used as a color target by a render pass. */
.BI "    Uint32 mip_level;                /**< The mip level to use as a color target. */
.BI "    Uint32 layer_or_depth_plane;     /**< The layer index or depth plane to use as a color target. This value is treated as a layer index on 2D array and cube textures, and as a depth plane on 3D textures. */
.BI "    SDL_FColor clear_color;          /**< The color to clear the color target to at the start of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */
.BI "    SDL_GPULoadOp load_op;           /**< What is done with the contents of the color target at the beginning of the render pass. */
.BI "    SDL_GPUStoreOp store_op;         /**< What is done with the results of the render pass. */
.BI "    SDL_GPUTexture *resolve_texture; /**< The texture that will receive the results of a multisample resolve operation. Ignored if a RESOLVE* store_op is not used. */
.BI "    Uint32 resolve_mip_level;        /**< The mip level of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. */
.BI "    Uint32 resolve_layer;            /**< The layer index of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. */
.BI "    bool cycle;                  /**< true cycles the texture if the texture is bound and load_op is not LOAD */
.BI "    bool cycle_resolve_texture;  /**< true cycles the resolve texture if the resolve texture is bound. Ignored if a RESOLVE* store_op is not used. */
.BI "    Uint8 padding1;
.BI "    Uint8 padding2;
.BI "} SDL_GPUColorTargetInfo;
.fi
.SH DESCRIPTION
The load_op field determines what is done with the texture at the beginning
of the render pass\[char46]


\(bu LOAD: Loads the data currently in the texture\[char46] Not recommended for
  multisample textures as it requires significant memory bandwidth\[char46]

\(bu CLEAR: Clears the texture to a single color\[char46]

\(bu DONT_CARE: The driver will do whatever it wants with the texture memory\[char46]
  This is a good option if you know that every single pixel will be touched
  in the render pass\[char46]

The store_op field determines what is done with the color results of the
render pass\[char46]


\(bu STORE: Stores the results of the render pass in the texture\[char46] Not
  recommended for multisample textures as it requires significant memory
  bandwidth\[char46]

\(bu DONT_CARE: The driver will do whatever it wants with the texture memory\[char46]
  This is often a good option for depth/stencil textures\[char46]

\(bu RESOLVE: Resolves a multisample texture into resolve_texture, which must
  have a sample count of 1\[char46] Then the driver may discard the multisample
  texture memory\[char46] This is the most performant method of resolving a
  multisample target\[char46]

\(bu RESOLVE_AND_STORE: Resolves a multisample texture into the
  resolve_texture, which must have a sample count of 1\[char46] Then the driver
  stores the multisample texture's contents\[char46] Not recommended as it requires
  significant memory bandwidth\[char46]

.SH AVAILABILITY
This struct is available since SDL 3\[char46]0\[char46]0

.SH SEE ALSO
.BR \(bu (3),
.BR SDL_BeginGPURenderPass (3)
