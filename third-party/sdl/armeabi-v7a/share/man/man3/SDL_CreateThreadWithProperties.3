.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_CreateThreadWithProperties:
.\"   https://wiki.libsdl.org/SDL_CreateThreadWithProperties
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-preview-3.1.3
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_CreateThreadWithProperties
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_CreateThreadWithProperties 3 "SDL 3.1.3" "Simple Directmedia Layer" "SDL3 FUNCTIONS"
.SH NAME
SDL_CreateThreadWithProperties \- Create a new thread with with the specified properties\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_thread\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "SDL_Thread * SDL_CreateThreadWithProperties(SDL_PropertiesID props);
.fi
.SH DESCRIPTION
These are the supported properties:


\(bu 
.BR
.BR SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER
:
  an 
.BR SDL_ThreadFunction
 value that will be called at
  the start of the new thread's life\[char46] Required\[char46]

\(bu 
.BR
.BR SDL_PROP_THREAD_CREATE_NAME_STRING
:
  the name of the new thread, which might be available to debuggers\[char46]
  Optional, defaults to NULL\[char46]

\(bu 
.BR
.BR SDL_PROP_THREAD_CREATE_USERDATA_POINTER
:
  an arbitrary app-defined pointer, which is passed to the entry function
  on the new thread, as its only parameter\[char46] Optional, defaults to NULL\[char46]

\(bu 
.BR
.BR SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER
:
  the size, in bytes, of the new thread's stack\[char46] Optional, defaults to 0
  (system-defined default)\[char46]

SDL makes an attempt to report

.BR
.BR SDL_PROP_THREAD_CREATE_NAME_STRING
to the system, so that debuggers can display it\[char46] Not all platforms support
this\[char46]

Thread naming is a little complicated: Most systems have very small limits
for the string length (Haiku has 32 bytes, Linux currently has 16, Visual
C++ 6\[char46]0 has _nine_!), and possibly other arbitrary rules\[char46] You'll have to
see what happens with your system's debugger\[char46] The name should be UTF-8 (but
using the naming limits of C identifiers is a better bet)\[char46] There are no
requirements for thread naming conventions, so long as the string is
null-terminated UTF-8, but these guidelines are helpful in choosing a name:

https://stackoverflow\[char46]com/questions/149932/naming-conventions-for-threads

If a system imposes requirements, SDL will try to munge the string for it
(truncate, etc), but the original string contents will be available from

.BR SDL_GetThreadName
()\[char46]

The size (in bytes) of the new stack can be specified with

.BR
.BR SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER
\[char46]
Zero means "use the system default" which might be wildly different between
platforms\[char46] x86 Linux generally defaults to eight megabytes, an embedded
device might be a few kilobytes instead\[char46] You generally need to specify a
stack that is a multiple of the system's page size (in many cases, this is
4 kilobytes, but check your system documentation)\[char46]

Note that this "function" is actually a macro that calls an internal
function with two extra parameters not listed here; they are hidden through
preprocessor macros and are needed to support various C runtimes at the
point of the function call\[char46] Language bindings that aren't using the C
headers will need to deal with this\[char46]

The actual symbol in SDL is

.BR
.BR SDL_CreateThreadWithPropertiesRuntime
,
so there is no symbol clash, but trying to load an SDL shared library and
look for "
.BR SDL_CreateThreadWithProperties
"
will fail\[char46]

Usually, apps should just call this function the same way on every platform
and let the macros hide the details\[char46]

.SH FUNCTION PARAMETERS
.TP
.I props
the properties to use\[char46]
.SH RETURN VALUE
(
.BR SDL_Thread
 *) Returns an opaque pointer to the new thread
object on success, NULL if the new thread could not be created; call

.BR SDL_GetError
() for more information\[char46]

.SH AVAILABILITY
This function is available since SDL 3\[char46]0\[char46]0\[char46]

.SH SEE ALSO
.BR \(bu (3),
.BR SDL_CreateThread (3),
.BR \(bu (3),
.BR SDL_WaitThread (3)
