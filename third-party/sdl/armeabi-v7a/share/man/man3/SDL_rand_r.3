.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_rand_r:
.\"   https://wiki.libsdl.org/SDL_rand_r
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-preview-3.1.3
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_rand_r
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_rand_r 3 "SDL 3.1.3" "Simple Directmedia Layer" "SDL3 FUNCTIONS"
.SH NAME
SDL_rand_r \- Generate a pseudo-random number less than n for positive n
.SH HEADER FILE
Defined in SDL3/SDL_stdinc\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "Sint32 SDL_rand_r(Uint64 *state, Sint32 n);
.fi
.SH DESCRIPTION
The method used is faster and of better quality than
.BR rand() % n
\[char46] Odds are
roughly 99\[char46]9% even for n = 1 million\[char46] Evenness is better for smaller n, and
much worse as n gets bigger\[char46]

Example: to simulate a d6 use
.BR SDL_rand_r(state, 6) + 1
The +1 converts
0\[char46]\[char46]5 to 1\[char46]\[char46]6

If you want to generate a pseudo-random number in the full range of Sint32,
you should use: (Sint32)
.BR SDL_rand_bits_r
(state)

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos)\[char46] There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs\[char46]

.SH FUNCTION PARAMETERS
.TP
.I state
a pointer to the current random number state, this may not be NULL\[char46]
.TP
.I n
the number of possible outcomes\[char46] n must be positive\[char46]
.SH RETURN VALUE
Returns a random value in the range of [0 \[char46]\[char46] n-1]\[char46]

.SH THREAD SAFETY
This function is thread-safe, as long as the state pointer isn't shared
between threads\[char46]

.SH AVAILABILITY
This function is available since SDL 3\[char46]0\[char46]0\[char46]

.SH SEE ALSO
.BR \(bu (3),
.BR SDL_rand (3),
.BR \(bu (3),
.BR SDL_rand_bits_r (3),
.BR \(bu (3),
.BR SDL_randf_r (3)
