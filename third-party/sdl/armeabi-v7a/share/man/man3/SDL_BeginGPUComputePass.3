.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_BeginGPUComputePass:
.\"   https://wiki.libsdl.org/SDL_BeginGPUComputePass
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-preview-3.1.3
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_BeginGPUComputePass
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_BeginGPUComputePass 3 "SDL 3.1.3" "Simple Directmedia Layer" "SDL3 FUNCTIONS"
.SH NAME
SDL_BeginGPUComputePass \- Begins a compute pass on a command buffer\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_gpu\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "SDL_GPUComputePass* SDL_BeginGPUComputePass(
.BI "    SDL_GPUCommandBuffer *command_buffer,
.BI "    const SDL_GPUStorageTextureReadWriteBinding *storage_texture_bindings,
.BI "    Uint32 num_storage_texture_bindings,
.BI "    const SDL_GPUStorageBufferReadWriteBinding *storage_buffer_bindings,
.BI "    Uint32 num_storage_buffer_bindings);
.fi
.SH DESCRIPTION
A compute pass is defined by a set of texture subresources and buffers that
may be written to by compute pipelines\[char46] These textures and buffers must
have been created with the COMPUTE_STORAGE_WRITE bit or the
COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE bit\[char46] If you do not create a texture
with COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE, you must not read from the
texture in the compute pass\[char46] All operations related to compute pipelines
must take place inside of a compute pass\[char46] You must not begin another
compute pass, or a render pass or copy pass before ending the compute pass\[char46]

A VERY IMPORTANT NOTE - Reads and writes in compute passes are NOT
implicitly synchronized\[char46] This means you may cause data races by both
reading and writing a resource region in a compute pass, or by writing
multiple times to a resource region\[char46] If your compute work depends on
reading the completed output from a previous dispatch, you MUST end the
current compute pass and begin a new one before you can safely access the
data\[char46] Otherwise you will receive unexpected results\[char46] Reading and writing a
texture in the same compute pass is only supported by specific texture
formats\[char46] Make sure you check the format support!

.SH FUNCTION PARAMETERS
.TP
.I command_buffer
a command buffer\[char46]
.TP
.I storage_texture_bindings
an array of writeable storage texture binding structs\[char46]
.TP
.I num_storage_texture_bindings
the number of storage textures to bind from the array\[char46]
.TP
.I storage_buffer_bindings
an array of writeable storage buffer binding structs\[char46]
.TP
.I num_storage_buffer_bindings
the number of storage buffers to bind from the array\[char46]
.SH RETURN VALUE
(
.BR SDL_GPUComputePass
 *) Returns a compute pass handle\[char46]

.SH AVAILABILITY
This function is available since SDL 3\[char46]0\[char46]0\[char46]

.SH SEE ALSO
.BR \(bu (3),
.BR SDL_EndGPUComputePass (3)
