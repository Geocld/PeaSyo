.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_GPUTextureUsageFlags:
.\"   https://wiki.libsdl.org/SDL_GPUTextureUsageFlags
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-preview-3.1.3
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_GPUTextureUsageFlags
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_GPUTextureUsageFlags 3type "SDL 3.1.3" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_GPUTextureUsageFlags \- Specifies how a texture is intended to be used by the client\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_gpu\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef Uint32 SDL_GPUTextureUsageFlags;
.BI "
.BI "#define SDL_GPU_TEXTUREUSAGE_SAMPLER                                 (1u << 0) /**< Texture supports sampling. */
.BI "#define SDL_GPU_TEXTUREUSAGE_COLOR_TARGET                            (1u << 1) /**< Texture is a color render target. */
.BI "#define SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET                    (1u << 2) /**< Texture is a depth stencil target. */
.BI "#define SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ                   (1u << 3) /**< Texture supports storage reads in graphics stages. */
.BI "#define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ                    (1u << 4) /**< Texture supports storage reads in the compute stage. */
.BI "#define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE                   (1u << 5) /**< Texture supports storage writes in the compute stage. */
.BI "#define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE (1u << 6) /**< Texture supports reads and writes in the same compute shader. This is NOT equivalent to READ | WRITE. */
.fi
.SH DESCRIPTION
A texture must have at least one usage flag\[char46] Note that some usage flag
combinations are invalid\[char46]

With regards to compute storage usage, READ | WRITE means that you can have
shader A that only writes into the texture and shader B that only reads
from the texture and bind the same texture to either shader respectively\[char46]
SIMULTANEOUS means that you can do reads and writes within the same shader
or compute pass\[char46] It also implies that atomic ops can be used, since those
are read-modify-write operations\[char46] If you use SIMULTANEOUS, you are
responsible for avoiding data races, as there is no data synchronization
within a compute pass\[char46] Note that SIMULTANEOUS usage is only supported by a
limited number of texture formats\[char46]

.SH AVAILABILITY
This datatype is available since SDL 3\[char46]0\[char46]0

.SH SEE ALSO
.BR \(bu (3),
.BR SDL_CreateGPUTexture (3)
