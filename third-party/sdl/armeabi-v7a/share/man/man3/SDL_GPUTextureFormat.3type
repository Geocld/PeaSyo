.\" This manpage content is licensed under Creative Commons
.\"  Attribution 4.0 International (CC BY 4.0)
.\"   https://creativecommons.org/licenses/by/4.0/
.\" This manpage was generated from SDL's wiki page for SDL_GPUTextureFormat:
.\"   https://wiki.libsdl.org/SDL_GPUTextureFormat
.\" Generated with SDL/build-scripts/wikiheaders.pl
.\"  revision SDL-preview-3.1.3
.\" Please report issues in this manpage's content at:
.\"   https://github.com/libsdl-org/sdlwiki/issues/new
.\" Please report issues in the generation of this manpage from the wiki at:
.\"   https://github.com/libsdl-org/SDL/issues/new?title=Misgenerated%20manpage%20for%20SDL_GPUTextureFormat
.\" SDL can be found at https://libsdl.org/
.de URL
\$2 \(laURL: \$1 \(ra\$3
..
.if \n[.g] .mso www.tmac
.TH SDL_GPUTextureFormat 3type "SDL 3.1.3" "Simple Directmedia Layer" "SDL3 DATATYPES"
.SH NAME
SDL_GPUTextureFormat \- Specifies the pixel format of a texture\[char46]
.SH HEADER FILE
Defined in SDL3/SDL_gpu\[char46]h

.SH SYNOPSIS
.nf
.B #include \(dqSDL3/SDL.h\(dq
.PP
.BI "typedef enum SDL_GPUTextureFormat
.BI "{
.BI "    SDL_GPU_TEXTUREFORMAT_INVALID,
.BI "
.BI "    /* Unsigned Normalized Float Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_A8_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R8_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R16_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM,
.BI "    /* Compressed Unsigned Normalized Float Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM,
.BI "    /* Compressed Signed Float Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT,
.BI "    /* Compressed Unsigned Float Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT,
.BI "    /* Signed Normalized Float Color Formats  */
.BI "    SDL_GPU_TEXTUREFORMAT_R8_SNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8_SNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R16_SNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16_SNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM,
.BI "    /* Signed Float Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_R16_FLOAT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32_FLOAT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT,
.BI "    /* Unsigned Float Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT,
.BI "    /* Unsigned Integer Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_R8_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32G32_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT,
.BI "    /* Signed Integer Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_R8_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32G32_INT,
.BI "    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT,
.BI "    /* SRGB Unsigned Normalized Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB,
.BI "    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB,
.BI "    /* Compressed SRGB Unsigned Normalized Color Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB,
.BI "    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB,
.BI "    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB,
.BI "    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB,
.BI "    /* Depth Formats */
.BI "    SDL_GPU_TEXTUREFORMAT_D16_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_D24_UNORM,
.BI "    SDL_GPU_TEXTUREFORMAT_D32_FLOAT,
.BI "    SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT,
.BI "    SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT
.BI "} SDL_GPUTextureFormat;
.fi
.SH DESCRIPTION
Texture format support varies depending on driver, hardware, and usage
flags\[char46] In general, you should use

.BR SDL_GPUTextureSupportsFormat
 to query if a
format is supported before using it\[char46] However, there are a few guaranteed
formats\[char46]

FIXME: Check universal support for 32-bit component formats FIXME: Check
universal support for SIMULTANEOUS_READ_WRITE

For SAMPLER usage, the following formats are universally supported:


\(bu R8G8B8A8_UNORM

\(bu B8G8R8A8_UNORM

\(bu R8_UNORM

\(bu R8_SNORM

\(bu R8G8_UNORM

\(bu R8G8_SNORM

\(bu R8G8B8A8_SNORM

\(bu R16_FLOAT

\(bu R16G16_FLOAT

\(bu R16G16B16A16_FLOAT

\(bu R32_FLOAT

\(bu R32G32_FLOAT

\(bu R32G32B32A32_FLOAT

\(bu R11G11B10_UFLOAT

\(bu R8G8B8A8_UNORM_SRGB

\(bu B8G8R8A8_UNORM_SRGB

\(bu D16_UNORM

For COLOR_TARGET usage, the following formats are universally supported:


\(bu R8G8B8A8_UNORM

\(bu B8G8R8A8_UNORM

\(bu R8_UNORM

\(bu R16_FLOAT

\(bu R16G16_FLOAT

\(bu R16G16B16A16_FLOAT

\(bu R32_FLOAT

\(bu R32G32_FLOAT

\(bu R32G32B32A32_FLOAT

\(bu R8_UINT

\(bu R8G8_UINT

\(bu R8G8B8A8_UINT

\(bu R16_UINT

\(bu R16G16_UINT

\(bu R16G16B16A16_UINT

\(bu R8_INT

\(bu R8G8_INT

\(bu R8G8B8A8_INT

\(bu R16_INT

\(bu R16G16_INT

\(bu R16G16B16A16_INT

\(bu R8G8B8A8_UNORM_SRGB

\(bu B8G8R8A8_UNORM_SRGB

For STORAGE usages, the following formats are universally supported:


\(bu R8G8B8A8_UNORM

\(bu R8G8B8A8_SNORM

\(bu R16G16B16A16_FLOAT

\(bu R32_FLOAT

\(bu R32G32_FLOAT

\(bu R32G32B32A32_FLOAT

\(bu R8G8B8A8_UINT

\(bu R16G16B16A16_UINT

\(bu R8G8B8A8_INT

\(bu R16G16B16A16_INT

For DEPTH_STENCIL_TARGET usage, the following formats are universally
supported:


\(bu D16_UNORM

\(bu Either (but not necessarily both!) D24_UNORM or D32_SFLOAT

\(bu Either (but not necessarily both!) D24_UNORM_S8_UINT or
  D32_SFLOAT_S8_UINT

Unless D16_UNORM is sufficient for your purposes, always check which of
D24/D32 is supported before creating a depth-stencil texture!

.SH AVAILABILITY
This enum is available since SDL 3\[char46]0\[char46]0

.SH SEE ALSO
.BR \(bu (3),
.BR SDL_CreateGPUTexture (3),
.BR \(bu (3),
.BR SDL_GPUTextureSupportsFormat (3)
